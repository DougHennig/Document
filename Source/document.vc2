*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.21" SourceFile="document.vcx" CPID="1252" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS document AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: adddocument		&& Adds a document to the document and entity tables and optionally uploads it to S3
		*m: deletedocument		&& Deletes a document from S3
		*m: executesql		&& Executes the specified SQL statement
		*m: finddocumentbyid		&& Finds a document by ID
		*m: finddocumentbyname		&& Finds the ID for a document from its filename or path
		*m: finddocumentsforentity		&& Creates a cursor of documents for the specified entity ID
		*m: finddocumentsforentityandtype		&& Creates a cursor of documents for the specified document type and entity id
		*m: getdocument		&& Gets a document by its document ID
		*m: getdocumenttype		&& Gets an object for the specified document type
		*m: getdocumenttypesforentity		&& Creates a cursor of document types for the specified entity
		*m: getinsertstatement		&& Gets the SQL statement to insert a record
		*m: getkey		&& Gets an S3 key for the specified file
		*m: setup		&& Sets up the document object
		*m: sharedocument		&& Shares an existing document with another entity
		*p: cdocumenttablename		&& The name of the document table
		*p: cdocumenttypetablename		&& The name of the document type table
		*p: cerrormessage		&& The error message if a method failed
		*p: cversion		&& The version number
		*p: nhandle		&& The connection handle for a remote database if necessary
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	*<PropValue>
		cdocumenttablename = Documents
		cdocumenttypetablename = DocumentTypes
		cerrormessage = 
		cversion = 2025.07.29
		Name = "document"
		nhandle = 0
		Width = 17
		_memberdata = <VFPData>
			<memberdata name="deletedocument" type="method" display="DeleteDocument"/>
			<memberdata name="getdocumenttype" type="method" display="GetDocumentType"/>
			<memberdata name="getkey" type="method" display="GetKey"/>
			<memberdata name="adddocument" display="AddDocument"/>
			<memberdata name="cerrormessage" display="cErrorMessage"/>
			<memberdata name="finddocumentbyid" display="FindDocumentByID"/>
			<memberdata name="finddocumentsforentityandtype" display="FindDocumentsForEntityAndType"/>
			<memberdata name="finddocumentbyname" display="FindDocumentByName"/>
			<memberdata name="getdocument" display="GetDocument"/>
			<memberdata name="executesql" display="ExecuteSQL"/>
			<memberdata name="nhandle" display="nHandle"/>
			<memberdata name="cdocumenttablename" display="cDocumentTableName"/>
			<memberdata name="cdocumenttypetablename" display="cDocumentTypeTableName"/>
			<memberdata name="getinsertstatement" display="GetInsertStatement"/>
			<memberdata name="finddocumentsforentity" display="FindDocumentsForEntity"/>
			<memberdata name="getdocumenttypesforentity" display="GetDocumentTypesForEntity"/>
			<memberdata name="setup" display="Setup"/>
			<memberdata name="sharedocument" display="ShareDocument"/>
			<memberdata name="cversion" display="cVersion"/>
		</VFPData>
	*</PropValue>
	
	PROCEDURE adddocument		&& Adds a document to the document and entity tables and optionally uploads it to S3
		*==============================================================================
		* Method:			AddDocument
		* Status:			Public
		* Purpose:			Adds a document to the document and document entity tables
		*						and optionally uploads it to S3
		* Last Revision:	07/16/2025
		* Parameters:		tcFilePath     - the path to the document
		*					tcDocumentType - document type
		*					tuEntityID     - ID of entity
		*					tlLocal        - .T. to use local storage or .F. to upload
		*						the document to S3
		*					tcFolder       - the subfolder to use in S3 (optional;
		*						ignored if tlLocal is .T.)
		*					tcDescription  - the document description (optional)
		*					tcComments     - comments about the document (optional)
		* Returns:			.T. if it succeeded
		* Environment in:	the necessary objects were initialized in Init
		*					the document tables are available
		* Environment out:	a record for the document was added to the document and
		*						document entity tables for the document type and, if
		*						tlLocal is .F. or not passed, the file was uploaded to
		*						S3
		*					the document and document entity tables are open if we're
		*						using DBFs
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tcFilePath, ;
			tcDocumentType, ;
			tuEntityID, ;
			tlLocal, ;
			tcFolder, ;
			tcDescription, ;
			tcComments
		local loType, ;
			lcEntity, ;
			lcField, ;
			llReturn, ;
			lnSelect
		private pcFilePath, ;
			ptFileDate, ;
			pcDescription, ;
			pcComments, ;
			pnDocTypeID, ;
			puEntityID, ;
			pcKey, ;
			pnDocumentID
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if vartype(tcFilePath) <> 'C' or empty(tcFilePath) or ;
			not file(tcFilePath)
			This.cErrorMessage = 'Invalid file path parameter.'
			return .F.
		endif vartype(tcFilePath) <> 'C' ...
		if vartype(tcDocumentType) <> 'C' or empty(tcDocumentType)
			This.cErrorMessage = 'Invalid document type parameter.'
			return .F.
		endif vartype(tcDocumentType) <> 'C' ...
		if empty(tuEntityID)
			This.cErrorMessage = 'Invalid entity ID parameter.'
			return .F.
		endif empty(tuEntityID)
		if vartype(tlLocal) <> 'L'
			This.cErrorMessage = 'Invalid local parameter.'
			return .F.
		endif vartype(tlLocal) <> 'L'
		if pcount() > 4 and vartype(tcFolder) <> 'C'
			This.cErrorMessage = 'Invalid folder parameter.'
			return .F.
		endif pcount() > 4 ...
		if pcount() > 5 and vartype(tcDescription) <> 'C'
			This.cErrorMessage = 'Invalid description parameter.'
			return .F.
		endif pcount() > 5 ...
		if pcount() > 6 and vartype(tcComments) <> 'C'
			This.cErrorMessage = 'Invalid comments parameter.'
			return .F.
		endif pcount() > 6 ...
		
		* Get the document type.
		
		loType = This.GetDocumentType(tcDocumentType)
		if isnull(loType)
			This.cErrorMessage = 'Invalid document type parameter.'
			return .F.
		endif isnull(loType)
		
		* Get some properties of the specified file.
		
		pcFilePath    = fullpath(trim(tcFilePath))
		ptFileDate    = fdate(pcFilePath, 1)
		pcDescription = evl(tcDescription, '')
		pcComments    = evl(tcComments, '')
		
		* Get the name and link field of the document entity table for the specified
		* document type and the key for the file.
		
		lcEntity    = trim(loType.Entity)
		lcField     = trim(loType.Field)
		pnDocTypeID = loType.DocTypeID
		puEntityID  = tuEntityID
		pcKey       = iif(tlLocal, '', This.GetKey(tcDocumentType, pcFilePath, ;
			tcFolder))
		
		* Upload the document to S3 if we're supposed to.
		
		if tlLocal
			llReturn = .T.
		else
			llReturn = _vfp.oDocument.Create(pcKey, pcFilePath)
			This.cErrorMessage = _vfp.oDocument.ErrorMessage
		endif tlLocal
		
		* If it succeeded, add the document to the document and document entity tables.
		
		if llReturn
			lnSelect     = select()
			pnDocumentID = 0
			text to lcSQL noshow textmerge
			INSERT INTO <<This.cDocumentTableName>>
					(
						DocTypeID,
						Path,
						Descrip,
						FileKey,
						Comments,
						FileDate,
						CreatedOn
					)
					values
					(
						?pnDocTypeID,
						?pcFilePath,
						?pcDescription,
						?pcKey,
						?pcComments,
						?ptFileDate,
						?DATETIME()
					)
			endtext
			llReturn = This.ExecuteSQL(lcSQL)
			if llReturn
				text to lcSQL noshow textmerge
				INSERT INTO <<lcEntity>>
					(
						<<lcField>>,
						DocumentID,
						CreatedOn
					)
					VALUES
					(
						?puEntityID,
						?pnDocumentID,
						?DATETIME()
					)
				endtext
				llReturn = This.ExecuteSQL(lcSQL)
			endif llReturn
			select (lnSelect)
		endif llReturn
		return llReturn
		
	ENDPROC

	PROCEDURE deletedocument		&& Deletes a document from S3
		*==============================================================================
		* Method:			DeleteDocument
		* Status:			Public
		* Purpose:			Deletes a document
		* Last Revision:	07/16/2025
		* Parameters:		tnDocumentID - the document ID
		*					tuEntityID   - the ID of the entity
		* Returns:			.T. if it succeeded
		* Environment in:	the necessary objects were initialized in Init
		*					the document tables are available
		* Environment out:	the record was deleted from the document entity table and
		*						if it was the last record referencing the document, the
		*						file was deleted (from S3 if an S3 document or from the
		*						path specified in the document table if not) and its
		*						record in the document table deleted
		*					the document tables are open if we're using DBFs
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tnDocumentID, ;
			tuEntityID
		local lnSelect, ;
			lcCursor, ;
			lcSQL, ;
			lcDocType, ;
			lcKey, ;
			lcPath, ;
			llS3, ;
			loType, ;
			lcEntity, ;
			lcField, ;
			llReturn, ;
			loException as Exception, ;
			lcResult, ;
			loResult
		private pnDocumentID, ;
			puEntityID
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if not vartype(tnDocumentID) $ 'NI' or tnDocumentID <= 0
			This.cErrorMessage = 'Invalid DocumentID parameter.'
			return .F.
		endif not vartype(tnDocumentID) $ 'NI' ...
		if empty(tuEntityID)
			This.cErrorMessage = 'Invalid entity ID parameter.'
			return .F.
		endif empty(tuEntityID)
		
		* Get information about document for the specified ID.
		
		pnDocumentID = tnDocumentID
		lnSelect     = select()
		lcCursor     = sys(2015)
		text to lcSQL noshow textmerge
		SELECT <<This.cDocumentTypeTableName>>.Name, <<This.cDocumentTableName>>.FileKey, <<This.cDocumentTableName>>.Path
			FROM <<This.cDocumentTypeTableName>>
			JOIN <<This.cDocumentTableName>> ON <<This.cDocumentTypeTableName>>.DocTypeID = <<This.cDocumentTableName>>.DocTypeID
			WHERE <<This.cDocumentTableName>>.DocumentID = ?pnDocumentID
		endtext
		if not This.ExecuteSQL(lcSQL, lcCursor)
			select (lnSelect)
			return .F.
		endif not This.ExecuteSQL(lcSQL ...
		lcDocType = trim(Name)
		lcKey     = trim(FileKey)
		lcPath    = Path
		llS3      = not empty(lcKey)
		use in (lcCursor)
		if empty(lcDocType)
			This.cErrorMessage = 'Document ' + transform(tnDocumentID) + ' does not exist.'
			select (lnSelect)
			return .F.
		endif empty(lcDocType)
		
		* Get the document entity table for the document type.
		
		loType     = This.GetDocumentType(lcDocType)
		lcEntity   = trim(loType.Entity)
		lcField    = trim(loType.Field)
		puEntityID = tuEntityID
		
		* Delete the record from the document entity table.
		
		text to lcSQL noshow textmerge
		DELETE FROM <<lcEntity>>
			WHERE <<lcField>> = ?puEntityID AND
				DocumentID = ?pnDocumentID
		endtext
		if not This.ExecuteSQL(lcSQL)
			select (lnSelect)
			return .F.
		endif not This.ExecuteSQL(lcSQL)
		
		* See how many records reference the specified document. If none, delete the
		* document and the record in the document table.
		
		text to lcSQL noshow textmerge
		SELECT COUNT(*) AS Cnt
			FROM <<lcEntity>>
			WHERE DocumentID = ?pnDocumentID
		endtext
		llReturn = This.ExecuteSQL(lcSQL, lcCursor)
		if llReturn and Cnt = 0
			if llS3
				llReturn = _vfp.oDocument.Delete(lcKey)
				This.cErrorMessage = _vfp.oDocument.ErrorMessage
			else
				try
					erase (lcPath)
				catch to loException
					llReturn = .F.
					This.cErrorMessage = loException.Message
				endtry
			endif llS3
			if llReturn
				text to lcSQL noshow textmerge
				DELETE FROM <<This.cDocumentTableName>>
					WHERE DocumentID = ?pnDocumentID
				endtext
				llReturn = This.ExecuteSQL(lcSQL)
			endif llReturn
		endif llReturn ...
		use in select(lcCursor)
		select (lnSelect)
		return llReturn
		
	ENDPROC

	PROTECTED PROCEDURE executesql		&& Executes the specified SQL statement
		lparameters tcSQL, ;
			tcCursor
		local llInsert, ;
			lcSQL, ;
			llReturn, ;
			laError[1], ;
			loException as Exception
		llInsert = alltrim(tcSQL, 1, chr(9)) = 'INSERT INTO ' + This.cDocumentTableName
		
		* We're using a remote database.
		
		if This.nHandle > 0
		
		* If we're inserting into the document table, we need a SQL statement that
		* returns the newly inserted ID. That varies from database to database so we'll
		* call a method that can be overridden in a subclass.
		
			if llInsert
				lcSQL = This.GetInsertStatement(tcSQL)
			else
				lcSQL = tcSQL
			endif llInsert
			if vartype(tcCursor) = 'C'
				llReturn = sqlexec(This.nHandle, lcSQL, tcCursor) > 0
			else
				llReturn = sqlexec(This.nHandle, lcSQL) > 0
			endif vartype(tcCursor) = 'C'
			do case
				case not llReturn
					aerror(laError)
					This.cErrorMessage = laError[3]
					if version(2) = 2
						set step on 
					endif version(2) = 2
				case llInsert
					pnDocumentID = SQLResult.DocumentID
			endcase
		
		* We're using VFP data.
		
		else
			lcSQL = strtran(chrtran(tcSQL, chr(13) + chr(10), '  '), '?')
			try
				if vartype(tcCursor) = 'C'
					&lcSQL into cursor (tcCursor)
				else
					&lcSQL
				endif vartype(tcCursor) = 'C'
				if llInsert
					pnDocumentID = evaluate(This.cDocumentTableName + '.DocumentID')
				endif llInsert
				llReturn = .T.
			catch to loException
				This.cErrorMessage = loException.Message
				if version(2) = 2
					set step on 
				endif version(2) = 2
			endtry
		endif This.nHandle > 0
		return llReturn
		
	ENDPROC

	PROTECTED PROCEDURE finddocumentbyid		&& Finds a document by ID
		lparameters tnDocumentID
		local lnSelect, ;
			lcCursor, ;
			lcSQL, ;
			llOK, ;
			loDocument
		private pnDocumentID
		pnDocumentID = tnDocumentID
		lnSelect     = select()
		lcCursor     = sys(2015)
		text to lcSQL noshow textmerge
		SELECT *
			FROM <<This.cDocumentTableName>>
			WHERE DocumentID = ?pnDocumentID
		endtext
		llOK = This.ExecuteSQL(lcSQL, lcCursor)
		if llOK and reccount(lcCursor) > 0
			scatter memo name loDocument
		else
			loDocument = NULL
		endif llOK ...
		use in select(lcCursor)
		select (lnSelect)
		return loDocument
		
	ENDPROC

	PROCEDURE finddocumentbyname		&& Finds the ID for a document from its filename or path
		*==============================================================================
		* Method:			FindDocumentByName
		* Status:			Public
		* Purpose:			Finds the ID for a document from its filename or path
		* Last Revision:	02/05/2025
		* Parameters:		tcFileName     - the name or path of the file
		*					tcDocumentType - the document type
		* Returns:			the ID of the document if there is one for the file (the
		*						most recent file if there's more than one with the same
		*						name) or 0 if not
		* Environment in:	the document tables are available
		* Environment out:	the document tables are open if we're using DBFs
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tcFileName, ;
			tcDocumentType
		local loType, ;
			lnSelect, ;
			lcCursor, ;
			llPath, ;
			lnReturn
		private pcFileName, ;
			pnDocTypeID
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if vartype(tcFileName) <> 'C' or empty(tcFileName)
			This.cErrorMessage = 'Invalid file name/path parameter.'
			return 0
		endif vartype(tcFileName) <> 'C' ...
		if vartype(tcDocumentType) <> 'C' or empty(tcDocumentType)
			This.cErrorMessage = 'Invalid document type parameter.'
			return 0
		endif vartype(tcDocumentType) <> 'C' ...
		
		* Get the document type.
		
		loType = This.GetDocumentType(tcDocumentType)
		if isnull(loType)
			This.cErrorMessage = 'Invalid document type parameter.'
			return 0
		endif isnull(loType)
		
		* Look for the document by file name or path.
		
		llPath      = '\' $ tcFileName
		pcFileName  = lower(iif(llPath, tcFileName, justfname(tcFileName)))
		pnDocTypeID = loType.DocTypeID
		lnSelect    = select()
		lcCursor    = sys(2015)
		text to lcSQL noshow textmerge
		SELECT DocumentID
			FROM <<This.cDocumentTableName>>
			WHERE LOWER(Path) = ?pcFileName AND
				DocTypeID = ?pnDocTypeID
			ORDER BY Modified DESC
		endtext
		if This.ExecuteSQL(lcSQL, lcCursor)
			lnReturn = DocumentID
		else
			lnReturn = 0
		endif This.ExecuteSQL(lcSQL ...
		use in select(lcCursor)
		select (lnSelect)
		return lnReturn
		
	ENDPROC

	PROCEDURE finddocumentsforentity		&& Creates a cursor of documents for the specified entity ID
		*==============================================================================
		* Method:			FindDocumentsForEntity
		* Status:			Public
		* Purpose:			Creates a cursor of documents for the specified entity ID
		* Last Revision:	07/16/2025
		* Parameters:		tcEntity   - the type of entity
		*					tuEntityID - the ID of the entity
		*					tcCursor   - the name of the cursor to create (optional:
		*						if it isn't specified, "curDocuments" is used)
		* Returns:			the number of matching documents if it succeeded or 0 if
		*						not or there are none
		* Environment in:	the document tables are available
		* Environment out:	the document tables are open if we're using DBFs
		*					a cursor containing information about the documents for the
		*						specified entity ID is open if it succeeded
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tcEntity, ;
			tuEntityID, ;
			tcCursor
		local loType, ;
			lnSelect, ;
			lcCursor, ;
			lcEntity, ;
			lcField, ;
			llOK, ;
			lnReturn
		private pcEntity, ;
			puEntityID
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if empty(tcEntity) or vartype(tcEntity) <> 'C'
			This.cErrorMessage = 'Invalid entity parameter.'
			return 0
		endif empty(tcEntity) ...
		if empty(tuEntityID)
			This.cErrorMessage = 'Invalid entity ID parameter.'
			return 0
		endif empty(tuEntityID)
		if pcount() = 3 and (vartype(tcCursor) <> 'C' or empty(tcCursor))
			This.cErrorMessage = 'Invalid cursor parameter.'
			return 0
		endif pcount() = 3 ...
		
		* Get the documents for the specified entity and entity ID.
		
		lnSelect = select()
		lcCursor = evl(tcCursor, 'curDocuments')
		pcEntity = tcEntity
		text to lcSQL noshow textmerge
		SELECT <<This.cDocumentTypeTableName>>.Field
			FROM <<This.cDocumentTypeTableName>>
			WHERE <<This.cDocumentTypeTableName>>.Entity = ?pcEntity
		endtext
		llOK = This.ExecuteSQL(lcSQL, 'curDocTypes')
		if llOK
			lcField    = trim(curDocTypes.Field)
			puEntityID = tuEntityID
			text to lcSQL noshow textmerge
			SELECT <<This.cDocumentTypeTableName>>.Name AS DocumentType,
					<<This.cDocumentTableName>>.*
				FROM <<tcEntity>>
				JOIN <<This.cDocumentTableName>> ON <<tcEntity>>.DocumentID = <<This.cDocumentTableName>>.DocumentID
				JOIN <<This.cDocumentTypeTableName>> ON <<This.cDocumentTableName>>.DocTypeID = <<This.cDocumentTypeTableName>>.DocTypeID
				WHERE <<tcEntity>>.<<lcField>> = ?puEntityID
			endtext
			llOK = This.ExecuteSQL(lcSQL, lcCursor)
			if llOK
				lnReturn = reccount(lcCursor)
			else
				lnReturn = 0
			endif llOK
		else
			This.cErrorMessage = 'Invalid entity parameter.'
			lnReturn = 0
		endif llOK
		use in select('curDocTypes')
		select (lnSelect)
		return lnReturn
		
	ENDPROC

	PROCEDURE finddocumentsforentityandtype		&& Creates a cursor of documents for the specified document type and entity id
		*==============================================================================
		* Method:			FindDocumentsForEntityAndType
		* Status:			Public
		* Purpose:			Creates a cursor of documents for the specified document
		*						type and entity ID
		* Last Revision:	02/05/2025
		* Parameters:		tcDocumentType - the document type
		*					tuEntityID     - the ID of the entity
		*					tcCursor       - the name of the cursor to create (optional:
		*						if it isn't specified, "curDocuments" is used)
		* Returns:			the number of matching documents if it succeeded or 0 if
		*						not or there are none
		* Environment in:	the document tables are available
		* Environment out:	the document tables are open if we're using DBFs
		*					a cursor containing information about the documents for the
		*						specified document type and entity ID is open if it
		*						succeeded
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tcDocumentType, ;
			tuEntityID, ;
			tcCursor
		local loType, ;
			lnSelect, ;
			lcCursor, ;
			lcEntity, ;
			lcField, ;
			llOK, ;
			lnReturn
		private pnDocTypeID, ;
			puEntityID
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if vartype(tcDocumentType) <> 'C' or empty(tcDocumentType)
			This.cErrorMessage = 'Invalid document type parameter.'
			return 0
		endif vartype(tcDocumentType) <> 'C' ...
		if empty(tuEntityID)
			This.cErrorMessage = 'Invalid entity ID parameter.'
			return 0
		endif empty(tuEntityID)
		if pcount() = 3 and (vartype(tcCursor) <> 'C' or empty(tcCursor))
			This.cErrorMessage = 'Invalid cursor parameter.'
			return 0
		endif pcount() = 3 ...
		
		* Get the document type.
		
		loType = This.GetDocumentType(tcDocumentType)
		if isnull(loType)
			This.cErrorMessage = 'Invalid document type parameter.'
			return 0
		endif isnull(loType)
		
		* Get the documents for the specified document type and entity ID.
		
		lnSelect    = select()
		lcCursor    = evl(tcCursor, 'curDocuments')
		lcEntity    = trim(loType.Entity)
		lcField     = trim(loType.Field)
		pnDocTypeID = loType.DocTypeID
		puEntityID  = tuEntityID
		text to lcSQL noshow textmerge
		SELECT <<This.cDocumentTableName>>.*
			FROM <<lcEntity>>
			JOIN <<This.cDocumentTableName>> ON <<lcEntity>>.DocumentID = <<This.cDocumentTableName>>.DocumentID
			JOIN <<This.cDocumentTypeTableName>> ON <<This.cDocumentTableName>>.DocTypeID = <<This.cDocumentTypeTableName>>.DocTypeID
			WHERE <<lcEntity>>.<<lcField>> = ?puEntityID AND
				<<This.cDocumentTypeTableName>>.DocTypeID = ?pnDocTypeID
		endtext
		llOK = This.ExecuteSQL(lcSQL, lcCursor)
		if llOK
			lnReturn = reccount(lcCursor)
		else
			lnReturn = 0
		endif llOK
		select (lnSelect)
		return lnReturn
		
	ENDPROC

	PROCEDURE getdocument		&& Gets a document by its document ID
		*==============================================================================
		* Method:			GetDocument
		* Status:			Public
		* Purpose:			Gets a document by its document ID
		* Last Revision:	07/16/2025
		* Parameters:		tnDocumentID - the document ID
		*					tcFilePath   - the name and path of the file to create
		* Returns:			.T. if it succeeded
		* Environment in:	the necessary objects were initialized in Init
		*					the document tables are be available
		*					if the document isn't in S3, it must exist in the path
		*						specified in the document table
		* Environment out:	the specified document was downloaded (if it's in S3) or
		*						copied (if it isn't) to the specified path
		*					the document tables are open if we're using DBFs
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tnDocumentID, ;
			tcFilePath
		local loDocument, ;
			lcKey, ;
			lcFilePath, ;
			llReturn, ;
			loException as Exception
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if not vartype(tnDocumentID) $ 'NI' or tnDocumentID <= 0
			This.cErrorMessage = 'Invalid DocumentID parameter.'
			return .F.
		endif not vartype(tnDocumentID) $ 'NI' ...
		if vartype(tcFilePath) <> 'C' or empty(tcFilePath) or ;
			not directory(justpath(fullpath(tcFilePath)))
			This.cErrorMessage = 'Invalid file path parameter.'
			return .F.
		endif vartype(tcFilePath) <> 'C' ...
		
		* Find the specified document ID and download it or copy it if found.
		
		loDocument = This.FindDocumentByID(tnDocumentID)
		if isnull(loDocument)
			This.cErrorMessage = 'Document ' + transform(tnDocumentID) + ;
				' does not exist.'
		else
			lcKey      = trim(loDocument.FileKey)
			lcFilePath = loDocument.Path
			do case
				case not empty(lcKey)
					llReturn = _vfp.oDocument.Get(lcKey, tcFilePath)
					This.cErrorMessage = _vfp.oDocument.ErrorMessage
				case not file(lcFilePath)
					This.cErrorMessage = lcFilePath + ' does not exist.'
				otherwise
					try
						copy file (lcFilePath) to (tcFilePath)
						llReturn = .T.
					catch to loException
						This.cErrorMessage = loException.Message
					endtry
			endcase
		endif isnull(loDocument)
		return llReturn
		
	ENDPROC

	PROTECTED PROCEDURE getdocumenttype		&& Gets an object for the specified document type
		lparameters tcDocumentType
		local lnSelect, ;
			lcCursor, ;
			lcSQL, ;
			llOK, ;
			loType
		private pcDocumentType
		pcDocumentType = tcDocumentType
		lnSelect       = select()
		lcCursor       = sys(2015)
		text to lcSQL noshow textmerge
		SELECT *
			FROM <<This.cDocumentTypeTableName>>
			WHERE Name = ?pcDocumentType
		endtext
		llOK = This.ExecuteSQL(lcSQL, lcCursor)
		if llOK and reccount(lcCursor) > 0
			scatter name loType
		else
			loType = NULL
		endif llOK ...
		use in select(lcCursor)
		select (lnSelect)
		return loType
		
	ENDPROC

	PROCEDURE getdocumenttypesforentity		&& Creates a cursor of document types for the specified entity
		*==============================================================================
		* Method:			GetDocumentTypesForEntity
		* Status:			Public
		* Purpose:			Creates a cursor of document types for the specified entity
		* Author:			Doug Hennig
		* Last Revision:	02/05/2025
		* Parameters:		tcEntity - the type of entity
		*					tcCursor - the name of the cursor to create (optional:
		*						if it isn't specified, "curDocTypes" is used)
		* Returns:			the number of document types for the entity if it succeeded
		*						or 0 if there are none
		* Environment in:	the document tables are available
		* Environment out:	the document tables are open if we're using DBFs
		*					a cursor containing information about the document types
		*						for the specified entity is open if it succeeded
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tcEntity, ;
			tcCursor
		private pcEntity
		local lnSelect, ;
			lcCursor, ;
			lcSQL, ;
			llOK, ;
			lnReturn
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if empty(tcEntity) or vartype(tcEntity) <> 'C'
			This.cErrorMessage = 'Invalid entity parameter.'
			return 0
		endif empty(tcEntity) ...
		if pcount() = 2 and (vartype(tcCursor) <> 'C' or empty(tcCursor))
			This.cErrorMessage = 'Invalid cursor parameter.'
			return 0
		endif pcount() = 2 ...
		lnSelect = select()
		lcCursor = evl(tcCursor, 'curDocTypes')
		pcEntity = tcEntity
		text to lcSQL noshow textmerge
		SELECT <<This.cDocumentTypeTableName>>.Name,
				<<This.cDocumentTypeTableName>>.DocTypeID
			FROM <<This.cDocumentTypeTableName>>
			WHERE <<This.cDocumentTypeTableName>>.Entity = ?pcEntity
		endtext
		llOK = This.ExecuteSQL(lcSQL, lcCursor)
		if llOK
			lnReturn = reccount(lcCursor)
		else
			This.cErrorMessage = 'Invalid entity parameter.'
			lnReturn = 0
		endif llOK
		return lnReturn
		
	ENDPROC

	PROCEDURE getinsertstatement		&& Gets the SQL statement to insert a record
		* Get the SQL statement to insert a record into the document table. This code
		* assumes SQL Server. For a different database, subclass and override this
		* method (for example, for MySQL, it would be:
		* lcSQL = tcSQL + '; SELECT LAST_INSERT_ID() AS DocumentID'
		
		lparameters tcSQL
		local lcSQL
		lcSQL = stuff(tcSQL, atc('values', tcSQL), 0, 'OUTPUT Inserted.DocumentID' + chr(13))
		return lcSQL
		
	ENDPROC

	PROTECTED PROCEDURE getkey		&& Gets an S3 key for the specified file
		lparameters tcDocumentType, ;
			tcFileName, ;
			tcFolder
		local loType, ;
			lcS3Folder, ;
			lcFileName, ;
			lcFolder, ;
			lnI, ;
			lcChar, ;
			lcKey
		
		* Find the folder for the document type. Note: we don't support writing files
		* to the root folder.
		
		loType     = This.GetDocumentType(tcDocumentType)
		lcS3Folder = chrtran(lower(alltrim(loType.S3Folder)), '\ ', '/_')
		
		* Convert backslashes and spaces to underscores and strip out non-alpha or digit
		* characters except valid ones (see
		* https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html)
		
		lcFileName = chrtran(lower(juststem(tcFileName)), '\ ', '__')
		lcFolder   = chrtran(lower(evl(tcFolder, '')), '\ ', '/_')
		lcFileName = lcFolder + iif(empty(lcFolder), '', '/') + lcFileName
		for lnI = len(lcFileName) to 1 step -1
			lcChar = substr(lcFileName, lnI, 1)
			if not isalpha(lcChar) and not isdigit(lcChar) and not lcChar $ "/!-_.*'()"
				lcFileName = left(lcFileName, lnI - 1) + substr(lcFileName, lnI + 1)
			endif not isalpha(lcChar) ...
		next lnI
		lcKey = forceext(lcS3Folder + '/' + lcFileName, lower(justext(tcFileName)))
		return lcKey
		
	ENDPROC

	PROCEDURE Init
		lparameters tcAccessID, ;
			tcSecretAccessKey, ;
			tcBucketName, ;
			tcRegion
		This.Setup(tcAccessID, tcSecretAccessKey, tcBucketName, tcRegion)
		
	ENDPROC

	PROCEDURE setup		&& Sets up the document object
		*==============================================================================
		* Method:			Setup
		* Status:			Public
		* Purpose:			Sets up the document object
		* Author:			Doug Hennig
		* Last Revision:	02/05/2025
		* Parameters:		tcAccessID        - the S3 access ID
		*					tcSecretAccessKey - the S3 secret access key
		*					tcBucketName      - the S3 bucket name
		*					tcRegion          - the S3 region name
		* Returns:			.T.
		* Environment in:	wwDotNetBridge components are available
		*					Document.dll, AWSSDK.Core.dll, and AWSSDK.S3.dll are
		*						available
		* Environment out:	if it succeeded, _vfp contains an oDocument member
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tcAccessID, ;
			tcSecretAccessKey, ;
			tcBucketName, ;
			tcRegion
		local loBridge
		
		* Check parameters.
		
		if vartype(tcAccessID) <> 'C' or empty(tcAccessID) or ;
			vartype(tcSecretAccessKey) <> 'C' or empty(tcSecretAccessKey) or ;
			vartype(tcBucketName) <> 'C' or empty(tcBucketName) or ;
			vartype(tcRegion) <> 'C' or empty(tcRegion)
			This.cErrorMessage = 'Invalid parameters.'
			return .F.
		endif vartype(tcAccessID) <> 'C' ...
		
		if not pemstatus(_vfp, 'oDocument', 5) or vartype(_vfp.oDocument) <> 'O'
			do wwDotNetBridge
			loBridge = GetwwDotNetBridge()
			if vartype(loBridge) = 'O'
				if not loBridge.LoadAssembly('Document.dll')
					error 'Error loading Document.dll: ' + loBridge.cErrorMsg
				endif not loBridge.LoadAssembly('Document.dll')
				addproperty(_vfp, 'oDocument', ;
					loBridge.CreateInstance('Document.S3Document', tcAccessID, ;
						tcSecretAccessKey, tcBucketName, tcRegion))
				if vartype(_vfp.oDocument) <> 'O'
					error 'Error instantiating Document class: ' + loBridge.cErrorMsg
				endif vartype(_vfp.oDocument) <> 'O'
			else
				error 'Error instantiating wwDotNetBridge'
			endif vartype(loBridge) = 'O'
		endif not pemstatus(_vfp, 'oDocument', 5) ...
		
	ENDPROC

	PROCEDURE sharedocument		&& Shares an existing document with another entity
		*==============================================================================
		* Method:			ShareDocument
		* Status:			Public
		* Purpose:			Shares an existing document with another entity
		* Last Revision:	07/17/2025
		* Parameters:		tnDocumentID - the document ID
		*					tuEntityID   - the ID of the entity
		* Returns:			.T. if it succeeded
		* Environment in:	the necessary objects were initialized in Init
		*					the document tables are available
		* Environment out:	a record for the document was added to the document entity
		*						table for the document type
		*					the document and document entity tables are open if we're
		*						using DBFs
		*					This.cErrorMessage contains the error message if it failed
		*==============================================================================
		
		lparameters tnDocumentID, ;
			tuEntityID
		local lnSelect, ;
			lcCursor, ;
			lcSQL, ;
			lcEntity, ;
			lcField, ;
			llReturn
		private pnDocumentID, ;
			puEntityID
		
		* Blank the error message.
		
		This.cErrorMessage = ''
		
		* Check parameters.
		
		if not vartype(tnDocumentID) $ 'NI' or tnDocumentID <= 0
			This.cErrorMessage = 'Invalid DocumentID parameter.'
			return .F.
		endif not vartype(tnDocumentID) $ 'NI' ...
		if empty(tuEntityID)
			This.cErrorMessage = 'Invalid entity ID parameter.'
			return .F.
		endif empty(tuEntityID)
		
		* Find the document for the specified ID.
		
		pnDocumentID = tnDocumentID
		lnSelect     = select()
		lcCursor     = sys(2015)
		text to lcSQL noshow textmerge
		SELECT <<This.cDocumentTypeTableName>>.Entity, <<This.cDocumentTypeTableName>>.Field
			FROM <<This.cDocumentTypeTableName>>
			JOIN <<This.cDocumentTableName>> ON <<This.cDocumentTypeTableName>>.DocTypeID = <<This.cDocumentTableName>>.DocTypeID
			WHERE <<This.cDocumentTableName>>.DocumentID = ?pnDocumentID
		endtext
		if not This.ExecuteSQL(lcSQL, lcCursor)
			select (lnSelect)
			return .F.
		endif not This.ExecuteSQL(lcSQL ...
		lcEntity = trim(Entity)
		lcField  = trim(Field)
		use in (lcCursor)
		if empty(nvl(lcField, ''))
			This.cErrorMessage = 'Document ' + transform(tnDocumentID) + ' does not exist.'
			select (lnSelect)
			return .F.
		endif empty(nvl(lcField, ''))
		
		* Add the document to the document entity table.
		
		puEntityID = tuEntityID
		text to lcSQL noshow textmerge
		INSERT INTO <<lcEntity>>
			(
				<<lcField>>,
				DocumentID,
				CreatedOn
			)
			VALUES
			(
				?puEntityID,
				?pnDocumentID,
				?DATETIME()
			)
		endtext
		llReturn = This.ExecuteSQL(lcSQL)
		select (lnSelect)
		return llReturn
		
	ENDPROC

ENDDEFINE
